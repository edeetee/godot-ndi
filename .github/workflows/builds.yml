name: Build GDExtension
on:
  push:
    branches: [main]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

env:
  LIBNAME: godot-ndi

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup clang-format
        shell: bash
        run: |
          python -m pip install clang-format

      - name: Run clang-format
        shell: bash
        run: |
          clang-format src/** --dry-run --Werror

  build:
    strategy:
      fail-fast: false
      matrix:
        float-precision: [single, double]
        target-type: [template_debug, template_release]
        target:
          [
            { platform: linux, arch: x86_64, os: ubuntu-latest },
            { platform: windows, arch: x86_64, os: windows-latest },
            { platform: macos, arch: universal, os: macos-latest },
          ]

    runs-on: ${{ matrix.target.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      # Build
      - name: ðŸ”— GDExtension Build
        uses: ./.github/actions/build
        with:
          platform: ${{ matrix.target.platform }}
          arch: ${{ matrix.target.arch }}
          float-precision: ${{ matrix.float-precision }}
          build-target-type: ${{ matrix.target-type }}

      # Sign
      - name: Mac Sign
        # Disable sign if secrets are not set
        if: ${{ matrix.target.platform == 'macos' && env.APPLE_CERT_BASE64 }}
        env:
          APPLE_CERT_BASE64: ${{ secrets.APPLE_CERT_BASE64 }}
        uses: ./.github/actions/sign
        with:
          FRAMEWORK_PATH: addons/${{ env.LIBNAME }}/bin/macos/${{ env.LIBNAME }}.framework
          APPLE_CERT_BASE64: ${{ secrets.APPLE_CERT_BASE64 }}
          APPLE_CERT_PASSWORD: ${{ secrets.APPLE_CERT_PASSWORD }}
          APPLE_DEV_PASSWORD: ${{ secrets.APPLE_DEV_PASSWORD }}
          APPLE_DEV_ID: ${{ secrets.APPLE_DEV_ID }}
          APPLE_DEV_TEAM_ID: ${{ secrets.APPLE_DEV_TEAM_ID }}
          APPLE_DEV_APP_ID: ${{ secrets.APPLE_DEV_APP_ID }}

      - name: Windows - Delete compilation files
        if: ${{ matrix.target.platform == 'windows' }}
        shell: pwsh
        run: |
          Remove-Item addons/${{ env.LIBNAME }}/bin/windows/* -Include *.exp,*.lib,*.pdb -Force

      - name: Copy license files
        run: |
          cp LICENSE addons/${{ env.LIBNAME }}/LICENSE
          cp README.md addons/${{ env.LIBNAME }}/README.md
          cp NOTICE.md addons/${{ env.LIBNAME }}/NOTICE.md

      - name: Upload Artifact
        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.LIBNAME }}-${{ matrix.target.platform }}-${{ matrix.target.arch }}-${{ matrix.float-precision }}-${{ matrix.target-type }}
          path: |
            ./*/${{ env.LIBNAME }}
            !./addons/${{ env.LIBNAME }}/project.godot

  merge:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Merge Artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: ${{ env.LIBNAME }}
          pattern: ${{ env.LIBNAME }}-*
          delete-merged: true

  release:
    runs-on: ubuntu-latest
    needs: merge
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.LIBNAME }}
          path: ${{ env.LIBNAME }}

      - name: Zip Artifact Back Up
        run: |
          sudo apt-get install -y zip
          cd ${{ env.LIBNAME }}
          zip -r ../${{ env.LIBNAME }}.zip .

      - name: Create Release Draft
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.LIBNAME }}.zip
          draft: true
          generate_release_notes: true
